/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import {
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  CoreAppCallArgs,
  RawAppCallArgs,
  AppState,
  TealTemplateParams,
  ABIAppCallArg,
} from '@algorandfoundation/algokit-utils/types/app'
import {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import { SendTransactionResult, TransactionToSign, SendTransactionFrom } from '@algorandfoundation/algokit-utils/types/transaction'
import { Algodv2, OnApplicationComplete, Transaction, TransactionWithSigner, AtomicTransactionComposer } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "authorizeCreator()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "optInAsset(asset)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "bootstrap(string,string,uint64,uint64,axfer)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "fund(pay,pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "claimNFT(axfer,asset)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "claimFund()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deleteDonatorInfo(account)void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "delete_application": "CALL",
    "no_op": "CREATE"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "goal": {
          "type": "uint64",
          "key": "goal"
        },
        "detail": {
          "type": "bytes",
          "key": "detail"
        },
        "title": {
          "type": "bytes",
          "key": "title"
        },
        "fundRaised": {
          "type": "uint64",
          "key": "fundRaised"
        },
        "donatorNum": {
          "type": "uint64",
          "key": "donatorNum"
        },
        "minDonation": {
          "type": "uint64",
          "key": "minDonation"
        },
        "active": {
          "type": "uint64",
          "key": "active"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 2,
      "num_uints": 5
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDgKaW50IDEKcmV0dXJu"
  },
  "contract": {
    "name": "charityCrowdfundingApp",
    "desc": "",
    "methods": [
      {
        "name": "authorizeCreator",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "optInAsset",
        "args": [
          {
            "name": "assetId",
            "type": "asset",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "bootstrap",
        "args": [
          {
            "name": "title",
            "type": "string",
            "desc": ""
          },
          {
            "name": "detail",
            "type": "string",
            "desc": ""
          },
          {
            "name": "goal",
            "type": "uint64",
            "desc": ""
          },
          {
            "name": "minDonation",
            "type": "uint64",
            "desc": ""
          },
          {
            "name": "nftTransfer",
            "type": "axfer",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "fund",
        "args": [
          {
            "name": "mbrPay",
            "type": "pay",
            "desc": ""
          },
          {
            "name": "fundPay",
            "type": "pay",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "claimNFT",
        "args": [
          {
            "name": "optin",
            "type": "axfer",
            "desc": ""
          },
          {
            "name": "nft",
            "type": "asset",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "claimFund",
        "args": [],
        "desc": "",
        "returns": {
          "type": "uint64",
          "desc": ""
        }
      },
      {
        "name": "deleteDonatorInfo",
        "args": [
          {
            "name": "donator",
            "type": "account",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt 
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

/**
 * Defines the types of available calls and state of the CharityCrowdfundingApp smart contract.
 */
export type CharityCrowdfundingApp = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'authorizeCreator()void' | 'authorizeCreator', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'optInAsset(asset)void' | 'optInAsset', {
      argsObj: {
        assetId: number | bigint
      }
      argsTuple: [assetId: number | bigint]
      returns: void
    }>
    & Record<'bootstrap(string,string,uint64,uint64,axfer)void' | 'bootstrap', {
      argsObj: {
        title: string
        detail: string
        goal: bigint | number
        minDonation: bigint | number
        nftTransfer: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [title: string, detail: string, goal: bigint | number, minDonation: bigint | number, nftTransfer: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: void
    }>
    & Record<'fund(pay,pay)void' | 'fund', {
      argsObj: {
        mbrPay: TransactionToSign | Transaction | Promise<SendTransactionResult>
        fundPay: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [mbrPay: TransactionToSign | Transaction | Promise<SendTransactionResult>, fundPay: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: void
    }>
    & Record<'claimNFT(axfer,asset)void' | 'claimNFT', {
      argsObj: {
        optin: TransactionToSign | Transaction | Promise<SendTransactionResult>
        nft: number | bigint
      }
      argsTuple: [optin: TransactionToSign | Transaction | Promise<SendTransactionResult>, nft: number | bigint]
      returns: void
    }>
    & Record<'claimFund()uint64' | 'claimFund', {
      argsObj: {
      }
      argsTuple: []
      returns: bigint
    }>
    & Record<'deleteDonatorInfo(account)void' | 'deleteDonatorInfo', {
      argsObj: {
        donator: string | Uint8Array
      }
      argsTuple: [donator: string | Uint8Array]
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      'goal'?: IntegerState
      'detail'?: BinaryState
      'title'?: BinaryState
      'fundRaised'?: IntegerState
      'donatorNum'?: IntegerState
      'minDonation'?: IntegerState
      'active'?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type CharityCrowdfundingAppSig = keyof CharityCrowdfundingApp['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends CharityCrowdfundingAppSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the CharityCrowdfundingApp smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends CharityCrowdfundingAppSig> = CharityCrowdfundingApp['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the CharityCrowdfundingApp smart contract to the method's return type
 */
export type MethodReturn<TSignature extends CharityCrowdfundingAppSig> = CharityCrowdfundingApp['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type CharityCrowdfundingAppCreateCalls = (typeof CharityCrowdfundingAppCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type CharityCrowdfundingAppCreateCallParams =
  | (TypedCallParams<undefined> & (OnCompleteNoOp))
/**
 * A factory for available 'delete' calls
 */
export type CharityCrowdfundingAppDeleteCalls = (typeof CharityCrowdfundingAppCallFactory)['delete']
/**
 * Defines supported delete methods for this smart contract
 */
export type CharityCrowdfundingAppDeleteCallParams =
  | TypedCallParams<undefined>
/**
 * Defines arguments required for the deploy method.
 */
export type CharityCrowdfundingAppDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: CharityCrowdfundingAppCreateCalls) => CharityCrowdfundingAppCreateCallParams
  /**
   * A delegate which takes a delete call factory and returns the delete call params for this smart contract
   */
  deleteCall?: (callFactory: CharityCrowdfundingAppDeleteCalls) => CharityCrowdfundingAppDeleteCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class CharityCrowdfundingAppCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the charityCrowdfundingApp smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Gets available delete call factories
   */
  static get delete() {
    return {
      /**
       * Constructs a delete call for the charityCrowdfundingApp smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the authorizeCreator()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static authorizeCreator(args: MethodArgs<'authorizeCreator()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'authorizeCreator()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the optInAsset(asset)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static optInAsset(args: MethodArgs<'optInAsset(asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'optInAsset(asset)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.assetId],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the bootstrap(string,string,uint64,uint64,axfer)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static bootstrap(args: MethodArgs<'bootstrap(string,string,uint64,uint64,axfer)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'bootstrap(string,string,uint64,uint64,axfer)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.title, args.detail, args.goal, args.minDonation, args.nftTransfer],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the fund(pay,pay)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static fund(args: MethodArgs<'fund(pay,pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'fund(pay,pay)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.mbrPay, args.fundPay],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the claimNFT(axfer,asset)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static claimNft(args: MethodArgs<'claimNFT(axfer,asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'claimNFT(axfer,asset)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.optin, args.nft],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the claimFund()uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static claimFund(args: MethodArgs<'claimFund()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'claimFund()uint64' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the deleteDonatorInfo(account)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static deleteDonatorInfo(args: MethodArgs<'deleteDonatorInfo(account)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'deleteDonatorInfo(account)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.donator],
      ...params,
    }
  }
}

/**
 * A client to make calls to the charityCrowdfundingApp smart contract
 */
export class CharityCrowdfundingAppClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `CharityCrowdfundingAppClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue }
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof CharityCrowdfundingApp['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the charityCrowdfundingApp smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: CharityCrowdfundingAppDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(CharityCrowdfundingAppCallFactory.create)
    const deleteArgs = params.deleteCall?.(CharityCrowdfundingAppCallFactory.delete)
    return this.appClient.deploy({
      ...params,
      deleteArgs,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the charityCrowdfundingApp smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The create result
       */
      bare(args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & CoreAppCallArgs & (OnCompleteNoOp) = {}): Promise<AppCallTransactionResultOfType<undefined>> {
        return $this.appClient.create(args) as unknown as Promise<AppCallTransactionResultOfType<undefined>>
      },
    }
  }

  /**
   * Gets available delete methods
   */
  public get delete() {
    const $this = this
    return {
      /**
       * Deletes an existing instance of the charityCrowdfundingApp smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The delete result
       */
      bare(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}): Promise<AppCallTransactionResultOfType<undefined>> {
        return $this.appClient.delete(args) as unknown as Promise<AppCallTransactionResultOfType<undefined>>
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the charityCrowdfundingApp smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the authorizeCreator()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public authorizeCreator(args: MethodArgs<'authorizeCreator()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CharityCrowdfundingAppCallFactory.authorizeCreator(args, params))
  }

  /**
   * Calls the optInAsset(asset)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public optInAsset(args: MethodArgs<'optInAsset(asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CharityCrowdfundingAppCallFactory.optInAsset(args, params))
  }

  /**
   * Calls the bootstrap(string,string,uint64,uint64,axfer)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public bootstrap(args: MethodArgs<'bootstrap(string,string,uint64,uint64,axfer)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CharityCrowdfundingAppCallFactory.bootstrap(args, params))
  }

  /**
   * Calls the fund(pay,pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public fund(args: MethodArgs<'fund(pay,pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CharityCrowdfundingAppCallFactory.fund(args, params))
  }

  /**
   * Calls the claimNFT(axfer,asset)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public claimNft(args: MethodArgs<'claimNFT(axfer,asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CharityCrowdfundingAppCallFactory.claimNft(args, params))
  }

  /**
   * Calls the claimFund()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public claimFund(args: MethodArgs<'claimFund()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CharityCrowdfundingAppCallFactory.claimFund(args, params))
  }

  /**
   * Calls the deleteDonatorInfo(account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public deleteDonatorInfo(args: MethodArgs<'deleteDonatorInfo(account)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CharityCrowdfundingAppCallFactory.deleteDonatorInfo(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<CharityCrowdfundingApp['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get goal() {
        return CharityCrowdfundingAppClient.getIntegerState(state, 'goal')
      },
      get detail() {
        return CharityCrowdfundingAppClient.getBinaryState(state, 'detail')
      },
      get title() {
        return CharityCrowdfundingAppClient.getBinaryState(state, 'title')
      },
      get fundRaised() {
        return CharityCrowdfundingAppClient.getIntegerState(state, 'fundRaised')
      },
      get donatorNum() {
        return CharityCrowdfundingAppClient.getIntegerState(state, 'donatorNum')
      },
      get minDonation() {
        return CharityCrowdfundingAppClient.getIntegerState(state, 'minDonation')
      },
      get active() {
        return CharityCrowdfundingAppClient.getIntegerState(state, 'active')
      },
    }
  }

  public compose(): CharityCrowdfundingAppComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      authorizeCreator(args: MethodArgs<'authorizeCreator()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.authorizeCreator(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      optInAsset(args: MethodArgs<'optInAsset(asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.optInAsset(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      bootstrap(args: MethodArgs<'bootstrap(string,string,uint64,uint64,axfer)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.bootstrap(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      fund(args: MethodArgs<'fund(pay,pay)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.fund(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      claimNft(args: MethodArgs<'claimNFT(axfer,asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.claimNft(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      claimFund(args: MethodArgs<'claimFund()uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.claimFund(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      deleteDonatorInfo(args: MethodArgs<'deleteDonatorInfo(account)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.deleteDonatorInfo(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      get delete() {
        const $this = this
        return {
          bare(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs) {
            promiseChain = promiseChain.then(() => client.delete.bare({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async execute() {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams: {} }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as CharityCrowdfundingAppComposer
  }
}
export type CharityCrowdfundingAppComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the authorizeCreator()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  authorizeCreator(args: MethodArgs<'authorizeCreator()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): CharityCrowdfundingAppComposer<[...TReturns, MethodReturn<'authorizeCreator()void'>]>

  /**
   * Calls the optInAsset(asset)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  optInAsset(args: MethodArgs<'optInAsset(asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): CharityCrowdfundingAppComposer<[...TReturns, MethodReturn<'optInAsset(asset)void'>]>

  /**
   * Calls the bootstrap(string,string,uint64,uint64,axfer)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  bootstrap(args: MethodArgs<'bootstrap(string,string,uint64,uint64,axfer)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): CharityCrowdfundingAppComposer<[...TReturns, MethodReturn<'bootstrap(string,string,uint64,uint64,axfer)void'>]>

  /**
   * Calls the fund(pay,pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  fund(args: MethodArgs<'fund(pay,pay)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): CharityCrowdfundingAppComposer<[...TReturns, MethodReturn<'fund(pay,pay)void'>]>

  /**
   * Calls the claimNFT(axfer,asset)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  claimNft(args: MethodArgs<'claimNFT(axfer,asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): CharityCrowdfundingAppComposer<[...TReturns, MethodReturn<'claimNFT(axfer,asset)void'>]>

  /**
   * Calls the claimFund()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  claimFund(args: MethodArgs<'claimFund()uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs): CharityCrowdfundingAppComposer<[...TReturns, MethodReturn<'claimFund()uint64'>]>

  /**
   * Calls the deleteDonatorInfo(account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  deleteDonatorInfo(args: MethodArgs<'deleteDonatorInfo(account)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): CharityCrowdfundingAppComposer<[...TReturns, MethodReturn<'deleteDonatorInfo(account)void'>]>

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the charityCrowdfundingApp smart contract using a bare call.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    bare(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs): CharityCrowdfundingAppComposer<[...TReturns, undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the charityCrowdfundingApp smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs): CharityCrowdfundingAppComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): CharityCrowdfundingAppComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Executes the transaction group and returns an array of results
   */
  execute(): Promise<CharityCrowdfundingAppComposerResults<TReturns>>
}
export type CharityCrowdfundingAppComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
